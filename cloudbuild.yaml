timeout: 3600s

substitutions:
  _CLUSTER: devnet-pragma
  _NAMESPACE: monitoring
  _DOMAIN: monitoring.devnet.pragma.build
  _ENVIRONMENT: prod

steps:
  - name: 'gcr.io/cloud-builders/docker'
    id: docker-build
    args: [ 'build',
            '--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}',
            '--file=Dockerfile',
            '.' ]

  - name: 'gcr.io/cloud-builders/docker'
    id: docker-push
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: get-credentials
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '${_CLUSTER}'
      - '--region=${_REGION}'
      - '--project=${PROJECT_ID}'
    waitFor: ['-']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: helm-deploy
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Install Helm
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh

        # Read credentials from mounted secret file
        source $$MONITORING_SECRETS

        # Create .env file and kubernetes secret from monitoring secrets
        while IFS='=' read -r key value; do
          echo "$key=$value"
        done < $$MONITORING_SECRETS > .env

        # Deploy with Helm
        helm upgrade --install pragma-monitoring ./helm \
          --namespace ${_NAMESPACE} \
          --create-namespace \
          --set image.tag=${SHORT_SHA} \
          --set image.repository=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME} \
          --set ingress.host=${_DOMAIN} \
          --set-file envFromSecret.data=.env \
          --wait --timeout 10m
    secretEnv: ['MONITORING_SECRETS']
    waitFor: ['docker-push', 'get-credentials']

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/monitoring-secrets/versions/latest
      env: 'MONITORING_SECRETS'

options:
  logging: CLOUD_LOGGING_ONLY
